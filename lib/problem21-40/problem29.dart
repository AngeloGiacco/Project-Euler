/*
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/
//
library euler.problem29;

import "dart:math";

const Map<int, int> powers = {
  2: 1,
  3: 1,
  4: 2,
  5: 1,
  6: 1,
  7: 1,
  8: 3,
  9: 2,
  10: 1,
  16: 4,
  25: 2,
  27: 3,
  32: 5,
  36: 2,
  49: 2,
  64: 6,
  81: 4,
  100: 2
}; //number, power
const int limit = 100;
void main() {
  List<int> bases2 = <int>[];
  List<int> bases3 = <int>[];
  List<int> bases5 = <int>[];
  List<int> bases6 = <int>[];
  List<int> bases7 = <int>[];
  List<int> bases10 = <int>[];
  int count = 0;
  for (int i = 2; i <= limit; i++) {
    for (int j = 2; j <= limit; j++) {
      if (powers.containsKey(i)) {
        int maxExponent = j * powers[i];
        int base = pow(i, (1 / powers[i])).toInt();
        switch (base) {
          case 2:
            if (!bases2.contains(maxExponent)) {
              count++;
              bases2.add(maxExponent);
            }
            break;
          case 3:
            if (!bases3.contains(maxExponent)) {
              count++;
              bases3.add(maxExponent);
            }
            break;
          case 5:
            if (!bases5.contains(maxExponent)) {
              count++;
              bases5.add(maxExponent);
            }
            break;
          case 6:
            if (!bases6.contains(maxExponent)) {
              count++;
              bases6.add(maxExponent);
            }
            break;
          case 7:
            if (!bases7.contains(maxExponent)) {
              count++;
              bases7.add(maxExponent);
            }
            break;
          case 10:
            if (!bases10.contains(maxExponent)) {
              count++;
              bases10.add(maxExponent);
            }
            break;
        }
      } else {
        count++;
      }
    }
  }
  print(count);
}
